name: Build, Test, and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install --production

      - name: Package application
        run: |
          mkdir -p release
          cp package.json release/
          cp index.js release/
          cp -r node_modules release/
          cd release && zip -r ../function.zip .

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: app-zip
          path: function.zip

  deploy:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: app-zip

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: af-south-1

      - name: Deploy to Lambda
        run: |
          aws lambda update-function-code \
            --function-name helloPeo \
            --zip-file fileb://function.zip

      - name: Create or Update API Gateway
        run: |
          # Check if API exists
          API_ID=$(aws apigatewayv2 get-apis --query "Items[?Name=='helloPeo-api'].ApiId" --output text)
          
          if [ -z "$API_ID" ]; then
            # Create new API
            echo "Creating new API Gateway..."
            API_RESPONSE=$(aws apigatewayv2 create-api \
              --name helloPeo-api \
              --protocol-type HTTP \
              --target arn:aws:lambda:af-south-1:${{ secrets.AWS_ACCOUNT_ID }}:function:helloPeo)
            
            API_ID=$(echo $API_RESPONSE | jq -r '.ApiId')
            
            # Create stage
            aws apigatewayv2 create-stage \
              --api-id $API_ID \
              --stage-name prod \
              --auto-deploy

            # Add Lambda permission
            aws lambda add-permission \
              --function-name helloPeo \
              --statement-id apigateway-permission \
              --action lambda:InvokeFunction \
              --principal apigateway.amazonaws.com \
              --source-arn "arn:aws:execute-api:af-south-1:${{ secrets.AWS_ACCOUNT_ID }}:$API_ID/*/*/*"
          else
            echo "API Gateway already exists with ID: $API_ID"
          fi
          
          # Output the API URL
          API_URL=$(aws apigatewayv2 get-api --api-id $API_ID --query 'ApiEndpoint' --output text)
          echo "API Gateway URL: $API_URL"